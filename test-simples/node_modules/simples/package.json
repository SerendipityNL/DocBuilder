{
  "name": "simples",
  "version": "0.3.4",
  "description": "Simple HTTP(S) Server",
  "keywords": [
    "cors",
    "http",
    "https",
    "rest",
    "simple",
    "server",
    "vhost",
    "web",
    "websocket"
  ],
  "homepage": "https://github.com/micnic/simples",
  "bugs": {
    "url": "https://github.com/micnic/simples/issues",
    "email": "micnic90@gmail.com"
  },
  "author": {
    "name": "Micleusanu Nicu",
    "email": "micnic90@gmail.com",
    "url": "https://github.com/micnic/"
  },
  "main": "index",
  "scripts": {
    "start": "node test/test.js",
    "test": "node test/test.js test"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/micnic/simples"
  },
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# simpleS 0.3.4\n\nsimpleS is a simple HTTP(S) server for Node.JS that has some special features:\n\n- Simple structure with minimum configuration\n- Routing for http GET and POST requests, static files and errors\n- Dynamic caching for static files\n- Virtual Hosting\n- WebSocket implementation (version 13, RFC 6455)\n- CORS support and Referer blocking\n- Sessions\n- Template engine connection\n- Automatic response compression (deflate and gzip)\n- Easy to use interfaces for requests and responses\n- Client-side simple API for AJAX and WebSocket\n\nTested with node.js 0.8+\n\n*THIS DESCRIPTION IS NOT COMPLETE, MORE CONTENT WILL BE ADDED*\n\n### [Documentation](https://github.com/micnic/simpleS/wiki/Documentation \"simpleS Documentation\")\n\n#### More simple modules\n[simpleT](http://micnic.github.com/simpleT/)\n\n## Instalation\n\n\tnpm install simples\n\n## Testing\n\n\tnpm test simples\n\n## Start Demo Server\n\n\tnpm start simples\n\nThen try [http://localhost:12345](http://localhost:12345) in your browser\n\n## Usage\n\n```javascript\nvar simples = require('simples');\n\nvar server = simples(12345); // Your server is set up on port 12345\n```\n\n## Routing\n\n```javascript\nserver.get('/', function (request, response) {\n\tresponse.end('root');\n});\n\nserver.serve('static_files'); // Route for static files located in the folder \"static_files\"\n\nserver.error(404, function (request, response) {\n\tresponse.end('404');\n});\n```\n\n## Virtual Hosting\n\n```javascript\nvar mainHost = server; // Main host\nvar host1 = server.host('example.com'); // Other hosts\nvar host2 = server.host('example2.com');\n\n// Now for each host you can apply individual routing\nmainHost.get('/', function (request, response) {\n\tresponse.end('Main Host');\n});\n\nhost1.get('/', function (request, response) {\n\tresponse.end('Host1');\n});\n\nhost2.get('/', function (request, response) {\n\tresponse.end('Host2');\n});\n```\n\n## WebSocket\n\n```javascript\nserver.ws('/', {\n\tlength: 1024, // The maximum size of a message\n\tprotocols: ['echo'] // The accepted protocols\n}, function (connection) {\n\tconsole.log('New connection');\n\n\tconnection.on('message', function (message) {\n\t\tmessage = message.toString();\n\t\tconsole.log(message);\n\t\tconnection.send(message);\n\t});\n\n\tconnection.on('close', function () {\n\t\tconsole.log('Connection closed');\n\t});\n});\n```\n\nOn client:\n\n```javascript\nvar socket = new WebSocket('ws://localhost:12345/', 'echo'); // Enjoy the real-time connection\n\nsocket.onmessage = function (event) {\n\tconsole.log(event.data);\n};\n\nsocket.send('ECHO');\n```",
  "readmeFilename": "README.md",
  "_id": "simples@0.3.4",
  "_from": "simples"
}
